package main

import (
	"net/http"
	"strconv"
	"time"

	models "github.com/diego-all/{{.LowerEntity}}-API/internal"  // (pilas con el plural)

	"github.com/go-chi/chi"
)

type {{.LowerEntity}}Request struct {
Descripcion	string	`json:"descripcion"`
Precio	integer	`json:"precio"`
Cantidad	integer	`json:"cantidad"`
Nombre	string	`json:"nombre"`
}

type {{.LowerEntity}}Response struct {
Descripcion	string	`json:"descripcion"`
Precio	integer	`json:"precio"`
Cantidad	integer	`json:"cantidad"`
Nombre	string	`json:"nombre"`
}



func (app *application) Create{{.Entity}}(w http.ResponseWriter, r *http.Request) {

	var {{.LowerEntity}}Req {{.LowerEntity}}Request
	var payload jsonResponse

	err := app.readJSON(w, r, &{{.LowerEntity}}Req)
	if err != nil {
		app.errorLog.Println(err)
		payload.Error = true
		payload.Message = "invalid json supplied, or json missing entirely"
		_ = app.writeJSON(w, http.StatusBadRequest, payload)
	}


	var {{.LowerEntity}} = models.{{.Entity}}{
Descripcion:	{{.LowerEntity}}Req.Descripcion,
Precio:	{{.LowerEntity}}Req.Precio,
Cantidad:	{{.LowerEntity}}Req.Cantidad,
Nombre:	{{.LowerEntity}}Req.Nombre,
}

	_, err = app.models.{{.Entity}}.Insert({{.LowerEntity}})
	if err != nil {
		app.errorJSON(w, err)
		return
	}

	payload = jsonResponse{
		Error:   false,
		Message: "{{.Entity}} successfully created",
		Data:    envelope{"{{.LowerEntity}}": {{.LowerEntity}}.Name},
	}

	_ = app.writeJSON(w, http.StatusAccepted, payload)
}