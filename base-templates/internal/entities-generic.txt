package models

import (
	"context"
	"time"
)

type {{.Entity}} struct {
 	Id	int	`json:"id"`
	Cantidad	integer	`json:"cantidad"`
	Random	string	`json:"random"`
	Nombre	string	`json:"nombre"`
	Descripcion	string	`json:"descripcion"`
	Precio	integer	`json:"precio"`
	CreatedAt   time.Time `json:"created_at"`
 	UpdatedAt   time.Time `json:"updated_at"`
}

func (p *{{.Entity}}) Insert({{.LowerEntity}} {{.Entity}}) (int, error) {
	ctx, cancel := context.WithTimeout(context.Background(), dbTimeout)
	defer cancel()

	var newID int

		stmt := `insert into {{.LowerEntity}}s (cantidad, random, nombre, descripcion, precio, created_at, updated_at)
 	values ($1, $2, $3, $4, $5, $6, $7) returning  id`

    err := db.QueryRowContext(ctx, stmt,
	{{.LowerEntity}}.Cantidad,
	{{.LowerEntity}}.Random,
	{{.LowerEntity}}.Nombre,
	{{.LowerEntity}}.Descripcion,
	{{.LowerEntity}}.Precio,
	time.Now(),
	time.Now(),
).Scan(&newID)


	if err != nil {
		return 0, err
	}

	return newID, nil
}



func (p *{{.Entity}}) GetOneById(id int) (*{{.Entity}}, error) {
	ctx, cancel := context.WithTimeout(context.Background(), dbTimeout)
	defer cancel()

    	query := `select id, cantidad, random, nombre, descripcion, precio, created_at, updated_at from {{.LowerEntity}}s where id = $1`

	var {{.LowerEntity}} {{.Entity}}
	row := db.QueryRowContext(ctx, query, id)

	err := row.Scan(
	&{{.LowerEntity}}.Cantidad,
	&{{.LowerEntity}}.Random,
	&{{.LowerEntity}}.Nombre,
	&{{.LowerEntity}}.Descripcion,
	&{{.LowerEntity}}.Precio,
	&{{.LowerEntity}}.Id,
 	&{{.LowerEntity}}.CreatedAt,
	&{{.LowerEntity}}.UpdatedAt,
)

	if err != nil {
		return nil, err
	}

	return &{{.LowerEntity}}, nil
}


func (p *{{.Entity}}) Update({{.LowerEntity}} {{.Entity}}) (int, error) {
	ctx, cancel := context.WithTimeout(context.Background(), dbTimeout)
	defer cancel() // resource leaks

	stmt := `update {{.LowerEntity}} set
 	Cantidad = $1,
	Random = $2,
	Nombre = $3,
	Descripcion = $4,
	Precio = $5,
	updated_at = $7
 	where id = $8`

	_, err := db.ExecContext(ctx, stmt,
	{{.LowerEntity}}.Cantidad,
	{{.LowerEntity}}.Random,
	{{.LowerEntity}}.Nombre,
	{{.LowerEntity}}.Descripcion,
	{{.LowerEntity}}.Precio,
	time.Now(),
 	{{.LowerEntity}}.Id,
)

	if err != nil {
		return 0, err
	}

	return 0, nil
}



func (p *{{.Entity}}) GetAll() ([]*{{.Entity}}, error) {
	ctx, cancel := context.WithTimeout(context.Background(), dbTimeout)
	defer cancel()

	query := `select id, cantidad, random, nombre, descripcion, precio, created_at, updated_at from {{.LowerEntity}}s order by nombre`

	rows, err := db.QueryContext(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var {{.LowerEntity}}s []*{{.Entity}}

	for rows.Next() {
		var {{.LowerEntity}} {{.Entity}}
		err := rows.Scan(
	&{{.LowerEntity}}.Cantidad,
	&{{.LowerEntity}}.Random,
	&{{.LowerEntity}}.Nombre,
	&{{.LowerEntity}}.Descripcion,
	&{{.LowerEntity}}.Precio,
	&{{.LowerEntity}}.Id,
 	&{{.LowerEntity}}.CreatedAt,
	&{{.LowerEntity}}.UpdatedAt,
)
		if err != nil {
			return nil, err
		}

		{{.LowerEntity}}s = append({{.LowerEntity}}s, &{{.LowerEntity}})
	}

	return {{.LowerEntity}}s, nil
}



func (p *{{.Entity}}) DeleteByID(id int) error {

	ctx, cancel := context.WithTimeout(context.Background(), dbTimeout)
	defer cancel()

	stmt := `delete from {{.LowerEntity}}s where id = $1`

	_, err := db.ExecContext(ctx, stmt, id)
	if err != nil {
		return err
	}
	return nil
}