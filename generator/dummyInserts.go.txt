package generator

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"regexp"
	"strconv"
	"strings"

	"github.com/google/generative-ai-go/genai"
	"github.com/joho/godotenv"
	"google.golang.org/api/option"
)

// DummyDataResult estructura para agrupar los resultados
type DummyDataResult struct {
	Inserts    string
	CreateJSON string
	UpdateJSON string
}

// Estructura de respuesta de Gemini
type DDLData struct {
	Candidates []struct {
		Index   int `json:"Index"`
		Content struct {
			Parts []string `json:"Parts"`
			Role  string   `json:"Role"`
		} `json:"Content"`
		FinishReason  int `json:"FinishReason"`
		SafetyRatings []struct {
			Category    int  `json:"Category"`
			Probability int  `json:"Probability"`
			Blocked     bool `json:"Blocked"`
		} `json:"SafetyRatings"`
		CitationMetadata interface{} `json:"CitationMetadata"`
		TokenCount       int         `json:"TokenCount"`
	} `json:"Candidates"`
	PromptFeedback interface{} `json:"PromptFeedback"`
	UsageMetadata  struct {
		PromptTokenCount        int `json:"PromptTokenCount"`
		CachedContentTokenCount int `json:"CachedContentTokenCount"`
		CandidatesTokenCount    int `json:"CandidatesTokenCount"`
		TotalTokenCount         int `json:"TotalTokenCount"`
	} `json:"UsageMetadata"`
}

// Generar datos dummy usando Gemini
func GenerateDummyData(class string, classMetadata [][]string) string {
	err := godotenv.Load()
	if err != nil {
		log.Fatalf("Error loading .env file: %v", err)
	}

	apiKey := os.Getenv("GEMINI_API_KEY")
	if apiKey == "" {
		log.Fatalf("GEMINI_API_KEY not found in environment variables")
	}

	ctx := context.Background()
	client, err := genai.NewClient(ctx, option.WithAPIKey(apiKey))
	if err != nil {
		log.Fatalf("Failed to create client: %v", err)
	}

	model := client.GenerativeModel("gemini-1.5-flash")

	var formattedMetadata []string
	for _, pair := range classMetadata {
		if len(pair) == 2 {
			formattedMetadata = append(formattedMetadata, fmt.Sprintf("%s|%s", pair[0], pair[1]))
		}
	}
	formattedMetadata = append(formattedMetadata, "created_at|DATETIME('now')")
	formattedMetadata = append(formattedMetadata, "updated_at|DATETIME('now')")

	formattedMetadataString := strings.Join(formattedMetadata, "\n")

	query := `Tengo un modelo de datos: ` + class + ` con los siguientes atributos y su tipo de dato correspondiente:
		` + formattedMetadataString + `
				
		Requiero construir basado en los datos anteriores las sentencias insert con data dummy, en total 5 sentencias para una base de datos sqlite, como las siguientes:
				
		-- DML statements [Dummy data]
		INSERT INTO products (name, description, price, created_at, updated_at)
			 VALUES ('Teléfono móvil', 'Smartphone de última generación', 799, DATETIME('now'), DATETIME('now'));
		
		INSERT INTO products (name, description, price, created_at, updated_at)
			 VALUES ('Camiseta', 'Camiseta de algodón', 20, DATETIME('now'), DATETIME('now'));
		
		INSERT INTO products (name, description, price, created_at, updated_at)
			 VALUES ('Sartén antiadherente', 'Sartén para cocinar', 35, DATETIME('now'), DATETIME('now'));
		
		INSERT INTO products (name, description, price, created_at, updated_at)
			 VALUES ('Balón de fútbol', 'Balón oficial de la FIFA', 50, DATETIME('now'), DATETIME('now'));
		
		INSERT INTO products (name, description, price, created_at, updated_at)
			 VALUES ('Muñeca', 'Muñeca de peluche para niños', 15, DATETIME('now'), DATETIME('now'));
			  
		También requiero que generes a partir de los 2 primeros inserts la estructura de una request JSON. Es decir 2 veces el siguiente
		ejemplo considerando el tipo de dato si son strings utilizar comillas, en caso de ser valores numéricos omitirlas.
		Debes omitir agregar los campos created_at y updated_at en estos 2 nuevos strings a generar, también omitir las llaves {}, no será
		un JSON, solo es una porción del mismo.`

	resp, err := model.GenerateContent(
		ctx,
		genai.Text(query),
	)
	if err != nil {
		log.Fatalf("Failed to generate content: %v", err)
	}

	respJSON, err := json.Marshal(resp)
	if err != nil {
		log.Fatalf("Failed to marshal response: %v", err)
	}

	var data DDLData
	err = json.Unmarshal(respJSON, &data)
	if err != nil {
		log.Fatalf("Error al deserializar la respuesta: %v", err)
	}

	var parts []string
	for _, candidate := range data.Candidates {
		parts = append(parts, candidate.Content.Parts...)
	}

	return strings.Join(parts, "\n")
}

// Extraer las sentencias INSERT del resultado
func ExtractInsertStatements(data string) []string {
	re := regexp.MustCompile(`(?i)INSERT INTO [^\;]+;`)
	inserts := re.FindAllString(data, -1)
	return inserts
}

// Crear una porción JSON a partir de un insert
func CreateJSONPortionFromInsert(insert string) string {
	re := regexp.MustCompile(`\(([^\)]+)\)\s+VALUES\s+\(([^\)]+)\)`)
	matches := re.FindStringSubmatch(insert)
	if len(matches) < 3 {
		return ""
	}

	fields := strings.Split(matches[1], ", ")
	values := strings.Split(matches[2], ", ")

	// Verificar que la longitud de fields y values coincida
	if len(fields) != len(values) {
		log.Printf("Longitud de campos y valores no coincide en la sentencia: %s", insert)
		return ""
	}

	var jsonPortion []string
	for i, field := range fields {
		field = strings.TrimSpace(field)
		if field == "created_at" || field == "updated_at" {
			continue
		}

		value := strings.TrimSpace(strings.Trim(values[i], "'"))
		if value != "null" {
			if _, err := strconv.Atoi(value); err == nil {
				jsonPortion = append(jsonPortion, fmt.Sprintf(`"%s": %s`, field, value))
			} else {
				jsonPortion = append(jsonPortion, fmt.Sprintf(`"%s": "%s"`, field, value))
			}
		} else {
			jsonPortion = append(jsonPortion, fmt.Sprintf(`"%s": %s`, field, value))
		}
	}

	return strings.Join(jsonPortion, ",\n")
}

// Función para agregar datos dummy
func AddDummyData(class string, classMetadata [][]string) DummyDataResult {
	dummyData := GenerateDummyData(class, classMetadata)
	inserts := ExtractInsertStatements(dummyData)

	var createJSON, updateJSON string
	if len(inserts) > 0 {
		createJSON = CreateJSONPortionFromInsert(inserts[0])
	}
	if len(inserts) > 1 {
		updateJSON = CreateJSONPortionFromInsert(inserts[1])
	}

	return DummyDataResult{
		Inserts:    strings.Join(inserts, "\n"),
		CreateJSON: createJSON,
		UpdateJSON: updateJSON,
	}
}
